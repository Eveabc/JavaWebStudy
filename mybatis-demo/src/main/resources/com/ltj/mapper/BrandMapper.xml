<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace
-->

<!--
        数据库表字段名称和实体类不一样，则不能自动封装
        一、sql语句取别名（太麻烦了）
        二、sql片段（导入麻烦）
        三、resultMap映射
    -->

<mapper namespace="com.ltj.mapper.BrandMapper">
    <!--
        id:唯一标识
        type:映射的类型，支持别名，区分大小写
    -->
    <resultMap id="brandResultMap" type="Brand">
        <!--
            column:表的列名
            property：实体类的属性名
            result:完成一般字段的映射
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>


    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>

    <!--
        参数占位符
            1.#{}：会将其替换为 ?,为了防止sql注入
            2.${}: 拼sql,会存在sql注入问题
            3.使用时机：
                #{}参数传递的时候
                表名或者列名不固定的情况下：${} 会存在sql注入问题

                特殊字符处理
                    1.转义字符：
                    2.CDATA区
    -->
    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id
      <![CDATA[
        <
      ]]>
      #{id};
    </select>

    <!--条件查询-->
    <!--<select id="selectByCondition" resultMap="brandResultMap">-->
    <!--select *-->
    <!--from tb_brand-->
    <!--where-->
    <!--status=#{status}-->
    <!--and company_name like #{companyName}-->
    <!--and brand_name like #{brandName}-->
    <!--</select>-->

    <!--
            解决and
                1.恒等式 在where 后面加上1=1
                2.<where>标签 将原来的where换成<where>标签

                动态标签 <if> <where>
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status!=null">
                and status=#{status}
            </if>
            <if test="companyName!=null and companyName!=''">
                and company_name like #{companyName}
            </if>
            <if test="brandName!=null and brandName!=''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>


    <!--<select id="selectBySingleChoice" resultMap="brandResultMap">-->
    <!--select *-->
    <!--from tb_brand-->
    <!--where-->
    <!--<choose>-->
    <!--<when test="status!=null">-->
    <!--status=#{status}-->
    <!--</when>-->
    <!--<when test="companyName!=null and companyName!=''">-->
    <!--company_name like #{companyName}-->
    <!--</when>-->
    <!--<when test="brandName!=null and brandName!=''">-->
    <!--brand_name like #{brandName}-->
    <!--</when>-->
    <!--<otherwise>-->
    <!--1=1-->
    <!--</otherwise>-->
    <!--</choose>-->
    <!--</select>-->

    <select id="selectBySingleChoice" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose>
                <when test="status!=null">
                    status=#{status}
                </when>
                <when test="companyName!=null and companyName!=''">
                    company_name like #{companyName}
                </when>
                <when test="brandName!=null and brandName!=''">
                    brand_name like #{brandName}
                </when>
            </choose>
        </where>

    </select>

    <!--useGeneratedKeys="true" keyProperty="id" 设置之后就能直接查询到数据库自增的id-->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status})

    </insert>

    <update id="update">
        update tb_brand
        <set>
            <if test="brandName!=null and brandName!=''">
                brand_name=#{brandName},
            </if>
            <if test="companyName!=null and companyName!=''">
                company_name=#{companyName},
            </if>
            <if test="ordered!=null and ordered!=''">
                ordered=#{ordered},
            </if>
            <if test="description!=null and description!=''">
                description=#{description},
            </if>
            <if test="status!=null and status!=''">
                status=#{status}
            </if>

        </set>

        where id=#{id};

    </update>

    <delete id="deleteById">
        delete
        from tb_brand
        where id = #{id};
    </delete>


    <!--
            mybatis会将数组参数封装成一个map集合
               1.默认key值是array
               item:对应的sql表内的字段
               separator分隔符
                 <foreach collection="array" item="id" separator=",">
                  </foreach>
               2.使用@Param注解改变map集合的默认key值
    -->
    <delete id="deleteByIds">
        delete from tb_brand where id
        in (
        <foreach collection="ids" item="id" separator="," >
            #{id}
        </foreach>
        );
    </delete>
</mapper>